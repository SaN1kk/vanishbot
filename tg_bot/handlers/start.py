from aiogram import Router, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from bot import bot, admins
from tg_bot.db.sqlite import DataBase
from tg_bot.keyboards.settings import WaitingSettings, cancel_settings
from tg_bot.keyboards.subscription import create_subscription_keyboard, start_menu
from tg_bot.keyboards.direct_production import direct_production
from tg_bot.keyboards.self_ransom import self_ransom
from tg_bot.keyboards.waiting_exchange import exchange_kbd, Waiting, confirm_keyboard
from tg_bot.keyboards.delivery import delivery_cnd, goods_delivery, price_kbd
from tg_bot.middlewares.antiflood import AntiFloodMiddleware

router = Router()
router.message.middleware(AntiFloodMiddleware())
CHANNEL_ID = "@vanish_cn"

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫
applications = {}
applications_counter = 0

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
applications_translate = {}
applications_translate_counter = 0

db = DataBase()


async def start_message(message: types.Message, name: str, edit: bool):
    keyboard = start_menu()
    text = (f"–ü—Ä–∏–≤–µ—Ç, <b>{name}</b>.\n"
            f"<b>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –∏–º–µ–Ω–Ω–æ –Ω–∞—Å</b> üá®üá≥ \n\n"
            f"–í—ã–±–µ—Ä–∏ –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∏–∂–µ")

    if edit:
        await message.edit_text(text=text, reply_markup=keyboard)
    else:
        await message.answer(text=text, reply_markup=keyboard)


@router.message(Waiting.waiting_exchange)
async def exchange_choose(message: Message, state: FSMContext):
    keyboard = exchange_kbd()
    if message.text.startswith('/'):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ</b>, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É.")
        return

    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ</b>.")
        return

    if int(message.text) < 600:
        await message.answer(
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ - <b>600¬•.</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É <b>–±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω—É—é 600.</b>")
        return

    if int(message.text) > 10000:
        await message.answer(
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ - <b>10.000¬•.</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É <b>–±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω—É—é 10.000.</b> ")
        return

    amount = int(message.text)
    total = round(amount * db.get_exchange_rate(), 2)
    confirm_kbd = confirm_keyboard()
    await message.answer(
        text=f"–í—ã –≤–≤–µ–ª–∏ <b>{amount}¬•</b>.\n–ö—É—Ä—Å —é–∞–Ω—è: <b>{db.get_exchange_rate()}</b>.\n–ò—Ç–æ–≥–æ: <b>{total}‚ÇΩ</b>.\n–ë—É–¥–µ–º –æ–±–º–µ–Ω–∏–≤–∞—Ç—å?",
        reply_markup=confirm_kbd)
    await state.clear()
    await state.update_data(amount=amount, total=total)


# /start
@router.message(CommandStart())
async def start(message: Message):  # /start
    user_id = message.from_user.id
    name = message.from_user.first_name
    last_name = message.from_user.last_name
    username = message.from_user.username
    language_code = message.from_user.language_code
    is_bot = message.from_user.is_bot

    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        if member.status in ["member", "administrator", "creator"]:
            await start_message(message, name, False)
            existing_user = db.select_user(id=user_id)
            if existing_user is None:
                db.add_user(id=user_id, username=username, first_name=name, last_name=last_name,
                            language_code=language_code, is_bot=is_bot)
                await bot.send_message(chat_id=admins[2],
                                       text=f"üë§ <b>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É</b>\n"
                                            f"‚îå <b>ID</b>: <code>{user_id or '–ù–µ —É–∫–∞–∑–∞–Ω'}</code>\n"
                                            f"‚îú <b>Username</b>: @{message.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                                            f"‚îú <b>–ò–º—è</b>: {name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                                            f"‚îú <b>–§–∞–º–∏–ª–∏—è</b>: {last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                                            f"‚îú <b>–Ø–∑—ã–∫</b>: {language_code or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                                            f"‚îú <b>–≠—Ç–æ –±–æ—Ç?</b>: {'–î–∞' if is_bot else '–ù–µ—Ç'}\n"
                                            f"‚îî <b>–î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è</b>: {db.select_user(id=user_id)[6]}\n\n"
                                            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ</b>: <code>{db.count_users()}</code>")
            else:
                db.update_user(id=user_id, username=username, first_name=name, last_name=last_name,
                               language_code=language_code, is_bot=is_bot)
        else:
            keyboard = create_subscription_keyboard()
            await message.answer(
                text="<b>–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª</b>, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞.",
                reply_markup=keyboard
            )
    except Exception as err:
        await message.answer("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. \n–°–≤—è–∂–∏—Ç–µ—Å—å —Å @AustinBur")
        print(err)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
@router.callback_query(lambda call: call.data == "subscription verification")
async def verification(call: CallbackQuery):
    user_id = call.from_user.id
    db.update_last_interaction(user_id)
    name = call.from_user.first_name
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        if member.status in ['member', 'administrator', 'creator']:
            await start_message(call.message, name, True)
            await call.answer(text="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!")
        else:
            await call.answer(text="–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.")
    except Exception as err:
        await call.message.answer("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. \n–°–≤—è–∂–∏—Ç–µ—Å—å —Å @AustinBur")


# –ü—Ä—è–º–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
@router.callback_query(lambda call: call.data == "direct production")
async def direct_prod(call: CallbackQuery):
    user_id = call.from_user.id
    db.update_last_interaction(user_id)
    keyboard = direct_production()
    media = "AgACAgIAAxkBAAIBnmaeIG14srZiWmFa-zGoJI_q4O7rAAKL8DEb_SvwSFbhx0Fri0E3AQADAgADcwADNQQ"
    caption = """
- –ù–∞—Ö–æ–¥–∏–º –¥–ª—è –í–∞—Å –ø—Ä—è–º–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –≤ –ö–∏—Ç–∞–µ –ø–æ–¥ –≤–∞—à –∑–∞–ø—Ä–æ—Å.\n
<b>- –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Å–≤—è–∑–∏ —Å –ø—Ä—è–º—ã–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º</b>:\n
    <b>1)</b> –°–∞–º–∞—è –Ω–∏–∑–∫–∞—è —Ü–µ–Ω–∞ –Ω–∞ —Ä—ã–Ω–∫–µ (–º–æ–∂–Ω–æ –µ–µ —Å–Ω–∏–∑–∏—Ç—å –µ—â–µ –±–æ–ª—å—à–µ, –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º —Ç–æ—Ä–≥–∞, —ç—Ç–æ —Ç–∞–∫–∂–µ –≤—Ö–æ–¥–∏—Ç –≤ —ç—Ç—É —É—Å–ª—É–≥—É)
    <b>2)</b>  –†–∞–∑–ª–∏—á–Ω—ã–µ –Ω–æ–≤–∏–Ω–∫–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç —Ñ–∞–±—Ä–∏–∫ –¥–ª—è –≤–∞—Å (–°–º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –µ—â–µ –Ω–µ –≤–æ—à–µ–ª –≤ –±–æ–ª—å—à–æ–π –æ–±–æ—Ä–æ—Ç)
    <b>3)</b>  –£ –≤–∞—Å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∫–æ–Ω—Ç–∞–∫—Ç —ç—Ç–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ª–∏—á–Ω–æ –æ–±—â–∞—Ç—å—Å—è, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ.

- <b>–î–ª—è –∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç?</b> 

    ‚Ä¢ –î–ª—è –ª—é–¥–µ–π —É–∂–µ —Å –æ–ø—ã—Ç–æ–º –≤ —Ç–æ–≤–∞—Ä–Ω–æ–º –±–∏–∑–Ω–µ—Å–µ, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç –ø–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–µ —Ü–µ–Ω—ã –Ω–∞ —Å–≤–æ–∏ —Ç–æ–≤–∞—Ä—ã.

    ‚Ä¢ –î–ª—è –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç –≤—ã–π—Ç–∏ —Å—Ä–∞–∑—É —Å –ª—É—á—à–∏–º–∏ —Ü–µ–Ω–∞–º–∏ –Ω–∞ —Ä—ã–Ω–æ–∫ –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—é –¥—Ä—É–≥–∏–º –ø—Ä–æ–¥–∞–≤—Ü–∞–º.

–û—Å—Ç–∞–≤–ª—è–π –∑–∞—è–≤–∫—É –Ω–∞ <b><u>–ë–ï–°–ü–õ–ê–¢–ù–£–Æ</u></b> –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é

–ù–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –º—ã —Ä–∞–∑–±–µ—Ä–µ–º —Ç–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –∏ –ø–æ–º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –≤—ã—Ö–æ–¥ –∏–∑ —Ç–≤–æ–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏"""
    await call.message.answer_photo(photo=media, caption=caption, reply_markup=keyboard)
    await call.message.delete()
    await call.answer()


# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ –ø—Ä—è–º—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤
@router.callback_query(lambda call: call.data == "return start menu")
async def return_start(call: CallbackQuery):
    name = call.from_user.first_name
    user_id = call.from_user.id
    db.update_last_interaction(user_id)
    await start_message(call.message, name, False)
    await call.message.delete()
    await call.answer()


# –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
@router.callback_query(lambda call: call.data == "free consultation")
async def free_selection(call: CallbackQuery):
    user_id = call.from_user.id
    db.update_last_interaction(user_id)
    if db.get_open_application_id(user_id):
        await call.answer("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return

    user = call.from_user
    db.add_application(user_id, user.username, user.first_name, user.last_name, user.language_code)
    application_id = db.get_open_application_id(user_id)

    user_info = (
        f"üÜì <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é #{application_id}</b>\n\n"
        f"‚îå<b>ID</b>: <code>{user.id}</code>\n"
        f"‚îú<b>–ò–º—è</b>: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"‚îú<b>–§–∞–º–∏–ª–∏—è</b>: {user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"‚îú<b>Username</b>: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"‚îî<b>–Ø–∑—ã–∫</b>: {user.language_code or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
    )

    btn_1 = types.InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"close_application:{application_id}")
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[btn_1]])

    await bot.send_message(chat_id=admins[2], text=user_info, reply_markup=keyboard)
    await call.answer("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!", show_alert=True)


# –ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
@router.callback_query(lambda call: call.data.startswith("close_application:"))
async def close_application(call: CallbackQuery):
    application_id = int(call.data.split(":")[1])
    db.close_application(application_id)
    user_id = call.from_user.id
    db.update_last_interaction(user_id)
    await call.message.edit_text(f"<s>{call.message.text}</s>\n\n<b>–°—Ç–∞—Ç—É—Å:</b> –ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
    await call.answer("–ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞.", show_alert=True)


# –°–∞–º–æ–≤—ã–∫—É–ø
@router.callback_query(lambda call: call.data == "self ransom")
async def direct_prod(call: CallbackQuery):
    user_id = call.from_user.id
    db.update_last_interaction(user_id)
    keyboard = self_ransom()
    photo_path = "AgACAgIAAxkBAAIBk2aeH-ckntW8M-pSMmTJnAXHm8nbAAKJ8DEb_SvwSMnDI8JW8dBEAQADAgADcwADNQQ"
    doc_path = "BQACAgIAAxkBAAIBpGaeIMvrKOwCud7e7ur2hiCiaA92AAIiTwAC_SvwSPCGlU49AAGNJTUE"
    caption = '''
- –ú—ã –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º –≤—ã–∫—É–ø –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å <b><u>–õ–Æ–ë–´–•</u></b> –∫–∏—Ç–∞–π—Å–∫–∏—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤.
(<b>POIZON, TaoBao, 1688 –∏ –¥—Ä—É–≥–∏–µ</b>). –ì–ª–∞–≤–Ω–æ–µ - <u>—É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫–∏</u> –≤ –±–ª–∞–Ω–∫–µ –∑–∞–∫–∞–∑–æ–≤.

- –ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ —Å–∞–º–æ–≤—ã–∫—É–ø–∞, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "<b>–£—Å–ª–æ–≤–∏—è —Å–∞–º–æ–≤—ã–∫—É–ø–∞</b>".

- –î–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –±–ª–∞–Ω–∫–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Å–∞–º–æ–≤—ã–∫—É–ø–∞ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∏–¥–µ–æ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "<b>–í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>".

- –ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–ª–∞–Ω–∫–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "<b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–ª–∞–Ω–∫ –∑–∞–∫–∞–∑–æ–≤</b>"'''
    await call.message.answer_photo(photo=photo_path, caption=caption)
    await call.message.answer_document(document=doc_path, reply_markup=keyboard)
    await call.message.delete()
    await call.answer()


# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ —Å–∞–º–æ–≤—ã–∫—É–ø–∞
@router.callback_query(lambda call: call.data == "return start menu after self ransom")
async def return_start(call: CallbackQuery):
    name = call.from_user.first_name
    user_id = call.from_user.id
    db.update_last_interaction(user_id)
    await start_message(call.message, name, False)
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id - 1)
    await call.message.delete()
    await call.answer()


# –û–±–º–µ–Ω —é–∞–Ω–µ–π
@router.callback_query(lambda call: call.data == "exchange")
async def exchange(call: CallbackQuery, state: FSMContext):
    keyboard = exchange_kbd()
    user_id = call.from_user.id
    db.update_last_interaction(user_id)
    await call.message.edit_text(
        text=f'–û–±–º–µ–Ω –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è <b>–æ—Ç 600¬•</b>\n–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ <b>¬•</b> —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å.\n–ü–∏—Å–∞—Ç—å –Ω—É–∂–Ω–æ <b>—Å–ª–∏—Ç–Ω–æ</b>. <i>–ù–∞–ø—Ä–∏–º–µ—Ä: "14372"</i>\n\n–ö—É—Ä—Å —é–∞–Ω—è: <b>{db.get_exchange_rate()}</b>',
        reply_markup=keyboard)
    await state.set_state(Waiting.waiting_exchange)
    await call.answer()


# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ–±–º–µ–Ω–∞ —é–∞–Ω–µ–π
@router.callback_query(lambda call: call.data == "return start menu after exchange")
async def return_start(call: CallbackQuery, state: FSMContext):
    await state.clear()
    user_id = call.from_user.id
    db.update_last_interaction(user_id)
    name = call.from_user.first_name
    await start_message(call.message, name, False)
    await call.message.edit_text(text=call.message.text)
    await call.answer()


# –û–¥–æ–±—Ä–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞
@router.callback_query(lambda call: call.data == "confirm exchange")
async def confirm_exchange(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    amount = data.get("amount")
    total = data.get("total")
    name = call.from_user.first_name

    user_id = call.from_user.id
    db.update_last_interaction(user_id)
    if db.get_open_exchange_application_id(user_id):
        await state.clear()
        await start_message(call.message, name, True)
        await call.answer(text="–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return

    user = call.from_user
    db.add_exchange_application(user_id=user_id, username=user.username, first_name=user.first_name,
                                last_name=user.last_name, language_code=user.language_code, amount=amount,
                                rate=db.get_exchange_rate(), total=total)
    application_id = db.get_open_exchange_application_id(user_id)
    user_info = (
        f"üîÅ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω —é–∞–Ω–µ–π #{application_id}</b> üá®üá≥\n\n"
        f"‚îå<b>ID</b>: <code>{user.id}</code>\n"
        f"‚îú<b>–ò–º—è</b>: {user.first_name}\n"
        f"‚îú<b>–§–∞–º–∏–ª–∏—è</b>: {user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"‚îî<b>Username</b>: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        f"–Æ–∞–Ω–µ–π: <b>{amount}¬•</b>\n"
        f"–ö—É—Ä—Å —é–∞–Ω—è: <b>{db.get_exchange_rate()}</b>\n"
        f"–†—É–±–ª–µ–π: <b>{total}‚ÇΩ</b>"
    )
    btn_1 = types.InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É",
                                       callback_data=f"close_exchange_application:{application_id}")
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[btn_1]])

    await bot.send_message(chat_id=admins[2], text=user_info, reply_markup=keyboard)
    await state.clear()
    await call.message.edit_text(
        text=f"–í—ã –≤–≤–µ–ª–∏ <b>{amount}¬•</b>.\n–ö—É—Ä—Å —é–∞–Ω—è: <b>{db.get_exchange_rate()}</b>.\n–ò—Ç–æ–≥–æ: <b>{total}‚ÇΩ</b>.\n–û–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
    await start_message(call.message, name, False)
    await call.answer("–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!", show_alert=True)


# –û—Ç–º–µ–Ω–∞ –æ–±–º–µ–Ω–∞
@router.callback_query(lambda call: call.data == "cancel exchange")
async def cancel_exchange(call: CallbackQuery, state: FSMContext):
    await state.clear()
    user_id = call.from_user.id
    db.update_last_interaction(user_id)
    name = call.from_user.first_name
    await start_message(call.message, name, True)
    await call.answer("–û–±–º–µ–Ω –æ—Ç–º–µ–Ω—ë–Ω")


# –ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–±–º–µ–Ω
@router.callback_query(lambda call: call.data.startswith("close_exchange_application:"))
async def close_exchange_application(call: CallbackQuery):
    application_id = int(call.data.split(":")[1])
    db.close_exchange_application(application_id)
    user_id = call.from_user.id
    db.update_last_interaction(user_id)
    await call.message.edit_text(f"<s>{call.message.text}</s>\n\n<b>–°—Ç–∞—Ç—É—Å:</b> –ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
    await call.answer("–ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞.", show_alert=True)


# –î–æ—Å—Ç–∞–≤–∫–∞-—É—Å–ª–æ–≤–∏—è
@router.callback_query(lambda call: call.data == "delivery condition")
async def delivery_condition(call: CallbackQuery):
    user_id = call.from_user.id
    db.update_last_interaction(user_id)
    keyboard = delivery_cnd()
    await call.message.edit_text(text="<b>–° —á–µ–º –∂–µ–ª–∞–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è?</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∏–∂–µ",
                                 reply_markup=keyboard)
    await call.answer()


# –î–æ—Å—Ç–∞–≤–∫–∞
@router.callback_query(lambda call: call.data == "delivery")
async def delivery(call: CallbackQuery):
    keyboard = goods_delivery()
    user_id = call.from_user.id
    db.update_last_interaction(user_id)
    text = """
<b>–ö–∞—Ä–≥–æ:</b> –î–æ—Å—Ç–∞–≤–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ø–æ—Å–ª–µ —á–µ–≥–æ —è –æ—Ç–ø—Ä–∞–≤–ª—è—é –≤–∞—à–∏ –ø–æ—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ <b>–°–î–≠–ö</b>. –ë–ª–∞–≥–æ–¥–∞—Ä—è –∑–∞–∫–ª—é—á–µ–Ω–Ω–æ–º—É –¥–æ–≥–æ–≤–æ—Ä—É —Å –°–î–≠–ö, —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –±—É–¥–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –Ω–∏–∑–∫–æ–π.

–≠—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è <b>–º–∞–ª–µ–Ω—å–∫–∏—Ö –ø–∞—Ä—Ç–∏–π</b> –∏–ª–∏ <b>–ø–æ—à—Ç—É—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤</b>. –î–ª—è –±–æ–ª—å—à–∏—Ö –ø–∞—Ä—Ç–∏–π —Å –≤–µ—Å–æ–º –±–æ–ª–µ–µ 50 –∫–≥ –º—ã –º–æ–∂–µ–º —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –≤—ã–±–æ—Ä–∞ –∫–∞—Ä–≥–æ-–¥–æ—Å—Ç–∞–≤–∫–∏. –ï—Å–ª–∏ –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥—Ä—É–≥–æ–π –≤–∏–¥ –∫–∞—Ä–≥–æ-–¥–æ—Å—Ç–∞–≤–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>—Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π</b> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

<b>–í–∞–∂–Ω–æ:</b> –ö–∞—Ä–≥–æ-–¥–æ—Å—Ç–∞–≤–∫–∞ —è–≤–ª—è–µ—Ç—Å—è <b>—Å–µ—Ä—ã–º –≤–≤–æ–∑–æ–º</b>, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –≤–≤–æ–∑ —Ç–æ–≤–∞—Ä–æ–≤. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ–∑—Ç–∏ —Ü–µ–Ω–Ω—ã–π –≥—Ä—É–∑, —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è <b>—Å—Ç—Ä–∞—Ö–æ–≤–∫–æ–π</b>, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 5% –æ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞.

"""
    await call.message.edit_text(text=text, reply_markup=keyboard)
    await call.answer()


# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞–∑–∞–¥ –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏
@router.callback_query(lambda call: call.data == "return delivery_cnd after delivery")
async def return_delivery_cnd(call: CallbackQuery):
    user_id = call.from_user.id
    db.update_last_interaction(user_id)
    await delivery_condition(call)
    await call.answer()


# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏
@router.callback_query(lambda call: call.data == "return start menu after delivery")
async def return_start_menu(call: CallbackQuery):
    user_id = call.from_user.id
    db.update_last_interaction(user_id)
    await start_message(call.message, call.from_user.first_name, True)
    await call.answer()


# –°—Ç–æ–∏–º–æ—Å—Ç—å
@router.callback_query(lambda call: call.data == "price_delivery")
async def price_delivery(call: CallbackQuery):
    keyboard = price_kbd()
    user_id = call.from_user.id
    db.update_last_interaction(user_id)
    text = """
<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 45 ¬• –∑–∞ 1 –∫–≥.

–ï—Å–ª–∏ –≤–µ—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –º–µ–Ω–µ–µ 0,5 –∫–≥, —Ä–∞—Å—á–µ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –∫–∞–∫ <b>0,5 √ó 45 ¬• = 22,5 ¬•</b>.

<b>–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏:</b> 15-20 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏.

<b>–û—Ç–ø—Ä–∞–≤–∫–∞</b> –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é.

–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ —Å–∫–ª–∞–¥–∞, <b>–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ</b> –æ —Ç–æ–º, —á—Ç–æ –≤–∞—à–∞ –ø–æ—Å—ã–ª–∫–∞ –ø—Ä–∏–±—ã–ª–∞ –Ω–∞ —Å–∫–ª–∞–¥.

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã <b>–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é</b> –æ —Ç–æ–º, –∫–∞–∫ –æ—Ç—Å–ª–µ–¥–∏—Ç—å —Å–≤–æ—é –ø–æ—Å—ã–ª–∫—É.
"""
    await call.message.edit_text(text=text, reply_markup=keyboard)
    await call.answer()


# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
@router.callback_query(lambda call: call.data == "return start menu after delivery_cnd")
async def return_start_menu(call: CallbackQuery):
    user_id = call.from_user.id
    db.update_last_interaction(user_id)
    await start_message(call.message, call.from_user.first_name, True)
    await call.answer()


# ToDo -----------------------------------------------


# /change_course
@router.message(Command("change_course"))
async def change(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in admins:
        await message.answer("–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return

    await message.answer(
        text=f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: <b>{db.get_exchange_rate()}</b>.\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å —é–∞–Ω—è.\n<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 13.5</i>",
        reply_markup=cancel_settings())
    await state.set_state(WaitingSettings.waiting_settings)


@router.message(WaitingSettings.waiting_settings)
async def change_settings(message: Message, state: FSMContext):
    try:
        new_course = float(message.text)
        db.update_exchange_rate(new_rate=new_course)
        await message.answer(f"–ö—É—Ä—Å —é–∞–Ω—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω: <b>{db.get_exchange_rate()}</b>")
        await state.clear()
    except ValueError:
        await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.\n–ù–∞–ø—Ä–∏–º–µ—Ä: 13.5")


@router.callback_query(lambda call: call.data == "cancel settings")
async def cancel_st(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text(text=f"–û—Ç–º–µ–Ω–µ–Ω–æ, —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å —é–∞–Ω—è: <b>{db.get_exchange_rate()}</b>")
    await call.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")


# ToDo -----------------------------------------------


# /view_open_applications
@router.message(Command("view_open_applications"))
async def view_open_applications(message: Message):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏
    open_applications = db.get_all_open_applications()
    if message.from_user.id not in admins:
        await message.answer("–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return

    if not open_applications:
        await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.")
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∑–∞—è–≤–∫—É
    formatted_apps = []
    for app in open_applications:
        app_id = app[0]
        user_id = app[1]
        username = app[2] or "–ù–µ —É–∫–∞–∑–∞–Ω"
        first_name = app[3] or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        last_name = app[4] or "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        language_code = app[5] or "–ù–µ —É–∫–∞–∑–∞–Ω"
        created_at = app[6]

        formatted_apps.append(
            f"üÜì –ó–∞—è–≤–∫–∞ #{app_id}\n"
            f"‚îå<b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>: <code>{user_id}</code>\n"
            f"‚îú<b>–ò–º—è</b>: {first_name}\n"
            f"‚îú<b>–§–∞–º–∏–ª–∏—è</b>: {last_name}\n"
            f"‚îú<b>Username</b>: @{username}\n"
            f"‚îú<b>–Ø–∑—ã–∫</b>: {language_code}\n"
            f"‚îî<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</b>: {created_at}\n"
            f"------------------------------"
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–∞–º–∏
    formatted_message = "\n".join(formatted_apps)
    await message.answer(f"<b>–û—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏:</b>\n\n{formatted_message}")


# ToDo -----------------------------------------------


# /view_open_exchange_applications
@router.message(Command("view_open_exchange_applications"))
async def view_open_xchange_applications(message: Message):
    if message.from_user.id not in admins:
        await message.answer("–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏
    open_applications = db.get_open_exchange_applications()

    if not open_applications:
        await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–±–º–µ–Ω —é–∞–Ω–µ–π.")
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∑–∞—è–≤–∫—É
    formatted_apps = []
    for app in open_applications:
        app_id = app[0]
        user_id = app[1]
        username = app[2] or "–ù–µ —É–∫–∞–∑–∞–Ω"
        first_name = app[3] or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        last_name = app[4] or "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        language_code = app[5] or "–ù–µ —É–∫–∞–∑–∞–Ω"
        amount = app[6]
        rate = app[7]
        total = app[8]
        created_at = app[10]

        formatted_apps.append(
            f"üîÅ –ó–∞—è–≤–∫–∞ #{app_id}\n"
            f"‚îå<b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>: <code>{user_id}</code>\n"
            f"‚îú<b>–ò–º—è</b>: {first_name}\n"
            f"‚îú<b>–§–∞–º–∏–ª–∏—è</b>: {last_name}\n"
            f"‚îú<b>Username</b>: @{username}\n"
            f"‚îú<b>–Ø–∑—ã–∫</b>: {language_code}\n"
            f"‚îî<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</b>: {created_at}\n\n"
            f"–°—É–º–º–∞: <b>{amount}¬•</b>\n"
            f"–ö—É—Ä—Å —é–∞–Ω—è: <b>{rate}</b>\n"
            f"–ò—Ç–æ–≥–æ: <b>{total}‚ÇΩ</b>\n"
            f"------------------------------"
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–∞–º–∏
    formatted_message = "\n".join(formatted_apps)
    await message.answer(f"<b>–û—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏:</b>\n\n{formatted_message}")


# ToDo -----------------------------------------------


# /stats
@router.message(Command("stats"))
async def stats(message: Message):
    if message.from_user.id not in admins:
        await message.answer("–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return
    user_count = db.count_users()
    total_consultations = db.count_application()
    open_consultations = db.count_open_applications()
    closed_consultations = total_consultations - open_consultations

    total_exchanges = db.count_all_exchange_applications()
    open_exchanges = db.count_open_exchange_applications()
    closed_exchanges = total_exchanges - open_exchanges

    stats_message = (
        f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ</b>: {user_count}\n\n"
        f"üÜì <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</b>:\n"
        f"‚îå –í—Å–µ–≥–æ: {total_consultations}\n"
        f"‚îú –û—Ç–∫—Ä—ã—Ç—ã–µ: {open_consultations}üìÇ\n"
        f"‚îî –ó–∞–∫—Ä—ã—Ç—ã–µ: {closed_consultations}üîí\n\n"
        f"üîÅ <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –æ–±–º–µ–Ω –≤–∞–ª—é—Ç—ã:</b>\n"
        f"‚îå –í—Å–µ–≥–æ: {total_exchanges}\n"
        f"‚îú –û—Ç–∫—Ä—ã—Ç—ã–µ: {open_exchanges}üìÇ\n"
        f"‚îî –ó–∞–∫—Ä—ã—Ç—ã–µ: {closed_exchanges}üîí\n"
    )

    await message.answer(text=stats_message)
